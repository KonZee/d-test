script(src='http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js ')

script(src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js" charset="utf-8")

script.

	//- Flare graph (small left)
	(function(d3){
		var data = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]; // Isn't best idea, I know

		var maxSum = 0; // Store max value for outer radius calc

		var width = 280,
		height = 280,
		radius = height / 2 - 10;

		var arcPositive = d3.svg.arc()
			.innerRadius(0)
			.outerRadius(function(d){return radius / maxSum * parseFloat(d.data.positive);});

		var arcNeutral = d3.svg.arc()
			.innerRadius(function(d){return radius / maxSum * parseFloat(d.data.positive);})
			.outerRadius(function(d){return radius / maxSum * (parseFloat(d.data.positive) + parseFloat(d.data.neutral));});

		var arcNegative = d3.svg.arc()
			.innerRadius(function(d){return radius / maxSum * (parseFloat(d.data.positive) + parseFloat(d.data.neutral));})
			.outerRadius(function(d){return radius / maxSum * (parseFloat(d.data.positive) + parseFloat(d.data.neutral) + parseFloat(d.data.negative));});

		var piePositive = d3.layout.pie()
			.padAngle(.07)
			.value(function(d) { return d.key; });

		var pieNeutral = d3.layout.pie()
			.padAngle(.05)
			.value(function(d) { return d.key; });

		var pieNegative = d3.layout.pie()
			.padAngle(.03)
			.value(function(d) { return d.key; });

		var color = ["#434348", "#90ed7d", "#f15c80"];
		var tonality = ["Позитивные", "Нейтральные", "Негативные"]

		var svg = d3.select(".graph--flare").append("svg")
			.attr("width", width)
			.attr("height", height)
			.attr('version', "1.1")
			.attr('xmlns', 'http://www.w3.org/2000/svg')
			.attr('x', 0)
			.attr('y', 0)
			.attr('viewBox', "0 0 "+width+" "+height)
			.attr('width', width)
			.attr('height', height)
			.append("g")
			.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

		//- Div title
		var title = d3.select('.graph--flare')
			.append('div')
			.attr('class', 'graph__title graph__title--absolute text-right');

		title.append('div')
			.attr('class', 'title')
			.text('Тональность вопросов');

		title.append('div')
			.attr('class', 'subtitle')
			.text('по территориальным банкам');

		//- Div legend
		var legend = d3.select('.graph--flare')
			.append('div')
			.attr('class','graph__legend');

		for(var i=0; i < tonality.length; i++){

			var legendItem = legend.append('div')
				.attr('class', 'legend');

			legendItem.append('div')
				.style('background', color[i]);

			legendItem.append('span')
				.text(tonality[i]);
		}


		d3.csv('tonality.csv', function(error, dataset){

			if (error) throw error;

			dataset.forEach(function(d){
				var sum = parseFloat(d.positive) + parseFloat(d.neutral) + parseFloat(d.negative);
				if (sum > maxSum){maxSum = sum};
				d.key = +d.key;
			});

			var gPositive = svg.append("g")
				.attr("class", "posititve");

			var gNeutral = svg.append("g")
				.attr("class", "neutral");

			var gNegative = svg.append("g")
				.attr("class", "negative");

			gPositive.selectAll("path")
				.data(piePositive(dataset))
				.enter().append("path")
				.style("fill", color[0])
				.attr("d", arcPositive);

			gNeutral.selectAll("path")
				.data(pieNeutral(dataset))
				.enter().append("path")
				.style("fill", color[1])
				.attr("d", arcNeutral);

			gNegative.selectAll("path")
				.data(pieNegative(dataset))
				.enter().append("path")
				.style("fill", color[2])
				.attr("d", arcNegative);

		});


	})(window.d3);



	//- Donut graph (small center)
	(function(d3) {
		'use strict';

		var width = 180;
		var height = 180;
		var radius = Math.min(width, height) / 2;
		var donutWidth = 14;

		var color;

		var percent;

		var title = d3.select('.graph--donut')
			.append('div')
			.attr('class', 'graph__title text-center')
			.append('div')
			.attr('class', 'title')
			.text("Относительно результатов прошлого года");

		var body = d3.select('.graph--donut')
			.append('div')
			.attr('class', "graph__body");

		var arc = d3.svg.arc()
			.innerRadius(radius - donutWidth)
			.outerRadius(radius);

		var svg1 = d3.select('.graph__body')
			.append('svg')
			.attr('version', "1.1")
			.attr('xmlns', 'http://www.w3.org/2000/svg')
			.attr('x', 0)
			.attr('y', 0)
			.attr('viewBox', "0 0 "+width+" "+height)
			.attr('width', width)
			.attr('height', height)
			.append('g')
			.attr('transform', 'translate(' + (width / 2) +
				',' + (height / 2) + ')');

		var svg2 = d3.select('.graph__body')
			.append('svg')
			.attr('version', "1.1")
			.attr('xmlns', 'http://www.w3.org/2000/svg')
			.attr('x', 0)
			.attr('y', 0)
			.attr('viewBox', "0 0 "+width+" "+height)
			.attr('width', width)
			.attr('height', height)
			.append('g')
			.attr('transform', 'translate(' + (width / 2) +
				',' + (height / 2) + ')');

		var pie1 = d3.layout.pie()
			.value(function(d) { return d.users; })
			.sort(null);
		var pie2 = d3.layout.pie()
			.value(function(d) { return d.questions; })
			.sort(null);

		d3.csv('relative.csv', function(error, dataset){

			if (error) throw error;

			dataset.forEach(function(d){
				d.year = +d.year;
			});

			color = d3.scale.ordinal().range(["#eeeeee", "#ffa200"]);

			var path = svg1.selectAll('path')
				.data(pie1(dataset))
				.enter()
				.append('path')
				.attr('d', arc)
				.attr('fill', function(d, i) {
					return color(d.data.ucolor);
				});

			percent = Math.round(dataset[1].users/dataset[0].users * 100) + "%";
			svg1.append('text')
				.attr('style', 'font-size: 33.33px; text-anchor: middle;')
				.attr('fill', dataset[1].ucolor)
				.attr('dy', '0.4em')
				.text(percent);

			color = d3.scale.ordinal().range(["#eeeeee", "#a4ed16"]);

			var path = svg2.selectAll('path')
				.data(pie2(dataset))
				.enter()
				.append('path')
				.attr('d', arc)
				.attr('fill', function(d, i) {
					return color(d.data.qcolor);
				});

			percent = Math.round(dataset[1].questions/dataset[0].questions * 100) + "%";
			svg2.append('text')
				.attr('style', 'font-size: 33.33px; text-anchor: middle;')
				.attr('fill', dataset[1].qcolor)
				.attr('dy', '0.4em')
				.text(percent);

		});

		var desc = d3.select('.graph--donut')
			.append('div')
			.attr('class', "graph__desc text-center");

		desc.append('div')
			.text("Пользователи");
		desc.append('div')
			.text("Вопросы");

	})(window.d3);



	//- Pie graph (small right)
	(function(d3) {
		'use strict';

		var width = 50;
		var height = 50;
		var radius = Math.min(width, height) / 2;
		var color = d3.scale.ordinal()
			.range(["#7cb5ec", "#434348", "#90ed7d", "#f7a35c", "#8085e9"]);

		//- SVG graph itself
		var svg = d3.select('.graph--pie')
			.append('svg')
			.attr('version', "1.1")
			.attr('xmlns', 'http://www.w3.org/2000/svg')
			.attr('x', 0)
			.attr('y', 0)
			.attr('viewBox', "0 0 "+width+" "+height)
			.attr('width', width)
			.attr('height', height)
			.append('g')
			.attr('transform', 'translate(' + (width / 2) +
			',' + (height / 2) + ')');

		//- Div legend
		var legend = d3.select('.graph--pie')
			.append('div')
			.attr('class','graph__legend');

		//- Div title
		var title = d3.select('.graph--pie')
			.append('div')
			.attr('class', 'graph__title graph__title--absolute text-right');

		title.append('div')
			.attr('class', 'title')
			.text('Структура вопросов');

		title.append('div')
			.attr('class', 'subtitle')
			.text('по должностям');

		// Arc function
		var arc = d3.svg.arc()
			.outerRadius(radius);

		var pie = d3.layout.pie()
			.value(function(d) { return d.count; })
			.sort(null);

		d3.csv('structure.csv', function(error, dataset){

			if (error) throw error;

			dataset.forEach(function(d){
				d.count = +d.count;
			});

			var path = svg.selectAll('path')
				.data(pie(dataset))
				.enter()
				.append('path')
				.attr('d', arc)
				.attr('fill', function(d, i) {
					return color(d.data.label);
				});

			var legendItem = legend.selectAll('.legend')
				.data(color.domain())
				.enter()
				.append('div')
				.attr('class', 'legend');

			legendItem.append('div')
				.style('background', color);

			legendItem.append('span')
				.text(function(d) {return d;});

		});

	})(window.d3);

	// Line chart
	(function(d3){

		var title = d3.select('.graph--linechart')
			.append('div')
			.attr('class', 'graph__title text-center')
			.append('div')
			.attr('class', 'title')
			.text("Активность пользователей по неделям");

		var margin = {left:40,right:30,top:10,bottom:30};
		var svgWidth = 1660;
		var svgHeight = 336;
		var width = svgWidth - margin.left - margin.right;
		var height = svgHeight - margin.top - margin.bottom;

		var parseDate = d3.time.format("%d-%b-%y").parse;

		var x = d3.time.scale()
			.range([0,width]);

		var y = d3.scale.linear()
			.domain([0,100])
			.range([height,0]);

		var xAxis = d3.svg.axis()
			.scale(x)
			.ticks(d3.time.monday)
			.tickFormat(d3.time.format("%e/%m"))
			.orient("bottom");

		var yAxis = d3.svg.axis()
			.scale(y)
			.orient("left")
			.ticks(5)
			.tickSize(-width);

		// Define the line
		var lineFunction = d3.svg.line()
			.x(function(d) { return x(d.date); })
			.y(function(d) { return y(d.activity); })
			 .interpolate("monotone");


		var svg = d3.select(".graph--linechart")
			.append("svg")
			.attr('version', "1.1")
			.attr('xmlns', 'http://www.w3.org/2000/svg')
			.attr('x', 0)
			.attr('y', 0)
			.attr('viewBox', "0 0 "+svgWidth+" "+svgHeight)
			.attr('width', svgWidth)
			.attr('height', svgHeight)
			.append("g")
			.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

		svg.append('rect')
			.attr("width", width)
			.attr("height", height)
			.attr('style', 'fill:transparent;');

		svg.append('g')
			.attr('class', 'y axis')
			.call(yAxis)
			.selectAll("text")
			.attr("dx", "-8");

		d3.csv("activity.csv", function(error, dataset){
			dataset.forEach(function(d){
				d.date = parseDate(d.date);
				d.activity = +d.activity;
			});

			x.domain(d3.extent(dataset, function(d) { return d.date; }));

			svg.append('g')
				.attr('class', 'x axis')
				.attr("transform", "translate(0," + height + ")")
				.call(xAxis);

			svg.append("path")
				.attr("class", "line")
				.attr("d", lineFunction(dataset))
				.attr("style", "fill:transparent;");

			var gCircle = svg.append('g')
				.attr('class', 'circles');

			gCircle.selectAll('.dot')
				.data(dataset)
				.enter()
				.append('circle')
				.attr("r", 8)
				.attr("cx", function(d) { return x(d.date); })
				.attr("cy", function(d) { return y(d.activity); });

		});

	})(window.d3);

script(src="js/main.js")